name: Development CI/CD

on:
  push:
    branches: ["development"]

  pull_request:
    branches: ["development"]

env:
  IMAGE_NAME: "${{ secrets.DOCKERHUB_USERNAME }}/emailez-be" # Replace with your info
  DOTNET_VERSION: "8.0.x"
  CONTAINER_PORT: 8080
  CONTAINER_NAME: "emailez-be"
  BUILD_CONFIGURATION: "Release"
  ASPNETCORE_ENVIRONMENT: "Development"

jobs:
  build:
    runs-on: ubuntu-latest
    environment: Development

    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set up .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Build
        run: dotnet build --configuration ${{ env.BUILD_CONFIGURATION }}

  docker_build_and_push:
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    environment: Development

    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
            username: ${{ secrets.DOCKERHUB_USERNAME }}
            password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        run: |
            docker build --build-arg BUILD_CONFIGURATION=${{ env.BUILD_CONFIGURATION }} --build-arg ASPNETCORE_ENVIRONMENT=${{ env.ASPNETCORE_ENVIRONMENT }} -t ${{ env.IMAGE_NAME }}:dev -f ./EmailEZ.Api/Dockerfile .
            docker push ${{ env.IMAGE_NAME }}:dev
  deploy:
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    environment: Development
    needs: [docker_build_and_push]

    steps:

      - name: Deploy to DigitalOcean
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.DO_DROPLET_IP }}
          username: ${{ secrets.DO_USERNAME }}
          key: ${{ secrets.DO_SSH_PRIVATE_KEY }}
          passphrase: ${{ secrets.DO_SSH_PASSPHRASE }}
          script: |
            sudo apt-get update  # Update only once
            if ! command -v docker &> /dev/null
            then
              sudo apt-get install -y apt-transport-https ca-certificates curl software-properties-common
              curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
              sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
              sudo apt-get update
              sudo apt-get install -y docker-ce
              sudo systemctl start docker
              sudo systemctl enable docker
            fi
            docker stop ${{ env.CONTAINER_NAME}} || true
            docker rm ${{ env.CONTAINER_NAME}} || true
            docker image rm ${{ env.IMAGE_NAME }}:dev || true
            docker pull ${{ env.IMAGE_NAME }}:dev
            docker run -cpus=".5" -d -p 71:${{ env.CONTAINER_PORT }} --name ${{ env.CONTAINER_NAME}} ${{ env.IMAGE_NAME }}:dev
